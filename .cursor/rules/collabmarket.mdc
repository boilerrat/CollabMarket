---
alwaysApply: true
---

# CollabMarket Frontend Rules — Next.js 14 + shadcn/ui (stable)

Authoritative rules for the Mini App UI. Use the latest stable shadcn/ui per docs; do not use any canary releases.

Reference: shadcn/ui Next.js installation — https://ui.shadcn.com/docs/installation/next


## Golden Rules
- Use shadcn/ui (stable) via `shadcn@latest`. Do not use `canary` for Next.js or shadcn/ui.
- Stack: Next.js 14 App Router, Tailwind v3 JIT, Radix UI primitives, `class-variance-authority` or `tailwind-variants` for variants.
- Project paths: UI components live under `components/ui/*`. Import with the alias `@/`.
- Dark mode: `class` strategy (`dark`). Keep class names static; toggle known classes with booleans.
- Mini App: Call `sdk.actions.ready()` only after initial data hydrate.
- Keep bundle lean: prefer shadcn/ui + Tailwind; avoid additional UI kits.


## Fresh Setup (rebuild `web/`)
From repository root:

```bash
mkdir -p web && cd web
pnpm create next-app@latest . \
  --ts --eslint --tailwind --app --src-dir --import-alias "@/*"

# Initialize shadcn/ui (stable)
pnpm dlx shadcn@latest init
```

Recommended answers during shadcn init (stable):
- Framework: Next.js
- Language: TypeScript
- CSS: Tailwind
- Components directory: `components` (CLI will create `components/ui/*`)
- Alias: `@/`
- Tailwind config: dark mode via class; accept defaults

Add components as needed (examples):

```bash
pnpm dlx shadcn@latest add button card input textarea label select \
  dropdown-menu dialog sheet tabs toast sonner form skeleton avatar badge
```

Example usage:

```tsx
import { Button } from "@/components/ui/button"
```


## Tailwind & Styling
- Ensure `darkMode: "class"` in `tailwind.config.ts`.
- Allowed plugins: `@tailwindcss/forms`, `@tailwindcss/typography`, `@tailwindcss/line-clamp`.
- Prefer theme tokens over arbitrary values; keep `safelist` minimal.
- Use `clsx` and `tailwind-merge` for class composition and conflict resolution.
- Use CVA or `tailwind-variants` for component variants.


## Component & RSC Guidance
- Prefer Server Components for pages/layouts; add `"use client"` to interactive components.
- Keep shadcn-generated components unmodified when possible; extend via wrappers.
- Use Radix UI headless primitives for accessibility; style with Tailwind.


## Do Nots
- Do not use `next@canary` or `shadcn@canary`.
- Do not introduce other UI libraries for core surfaces.
- Do not generate dynamic class names at runtime beyond toggling known classes.


## Deployment
- Host on Vercel. Keep build minimal and fast.
- Serve manifest at `/.well-known/farcaster.json`. Fire Mini App ready after hydrate.


## Maintenance
- Preferred flow: shadcn CLI add → compose/wrap if needed → document variants.
- Keep this file aligned with shadcn/ui stable docs. Update commands/defaults when upstream changes.


Last updated: 2025-08-11# CollabMarket Frontend Rules — Next.js 14 + shadcn/ui (stable)

Authoritative rules for the Mini App UI. Use the latest stable shadcn/ui per docs; do not use any canary releases.

Reference: shadcn/ui Next.js installation — https://ui.shadcn.com/docs/installation/next


## Golden Rules
- Use shadcn/ui (stable) via `shadcn@latest`. Do not use `canary` for Next.js or shadcn/ui.
- Stack: Next.js 14 App Router, Tailwind v3 JIT, Radix UI primitives, `class-variance-authority` or `tailwind-variants` for variants.
- Project paths: UI components live under `components/ui/*`. Import with the alias `@/`.
- Dark mode: `class` strategy (`dark`). Keep class names static; toggle known classes with booleans.
- Mini App: Call `sdk.actions.ready()` only after initial data hydrate.
- Keep bundle lean: prefer shadcn/ui + Tailwind; avoid additional UI kits.


## Fresh Setup (rebuild `web/`)
From repository root:

```bash
mkdir -p web && cd web
pnpm create next-app@latest . \
  --ts --eslint --tailwind --app --src-dir --import-alias "@/*"

# Initialize shadcn/ui (stable)
pnpm dlx shadcn@latest init
```

Recommended answers during shadcn init (stable):
- Framework: Next.js
- Language: TypeScript
- CSS: Tailwind
- Components directory: `components` (CLI will create `components/ui/*`)
- Alias: `@/`
- Tailwind config: dark mode via class; accept defaults

Add components as needed (examples):

```bash
pnpm dlx shadcn@latest add button card input textarea label select \
  dropdown-menu dialog sheet tabs toast sonner form skeleton avatar badge
```

Example usage:

```tsx
import { Button } from "@/components/ui/button"
```


## Tailwind & Styling
- Ensure `darkMode: "class"` in `tailwind.config.ts`.
- Allowed plugins: `@tailwindcss/forms`, `@tailwindcss/typography`, `@tailwindcss/line-clamp`.
- Prefer theme tokens over arbitrary values; keep `safelist` minimal.
- Use `clsx` and `tailwind-merge` for class composition and conflict resolution.
- Use CVA or `tailwind-variants` for component variants.


## Component & RSC Guidance
- Prefer Server Components for pages/layouts; add `"use client"` to interactive components.
- Keep shadcn-generated components unmodified when possible; extend via wrappers.
- Use Radix UI headless primitives for accessibility; style with Tailwind.


## Do Nots
- Do not use `next@canary` or `shadcn@canary`.
- Do not introduce other UI libraries for core surfaces.
- Do not generate dynamic class names at runtime beyond toggling known classes.


## Deployment
- Host on Vercel. Keep build minimal and fast.
- Serve manifest at `/.well-known/farcaster.json`. Fire Mini App ready after hydrate.


## Maintenance
- Preferred flow: shadcn CLI add → compose/wrap if needed → document variants.
- Keep this file aligned with shadcn/ui stable docs. Update commands/defaults when upstream changes.


Last updated: 2025-08-11